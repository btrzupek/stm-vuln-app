(async () => {
const github = require('@actions/github');
const { Octokit } = await import('@octokit/rest');

const scannerToken = process.env.SCANNER_TOKEN;
//const getVulnerabilities = process.env.SCANNER_NAME;
const repoToken = process.env.REPO_TOKEN;

//const { Octokit } = require("@octokit/rest");
const octokit = new Octokit({ auth: scannerToken });
//const octokit = new Octokit({
//  auth: process.env.GITHUB_TOKEN,
//});

async function run() {
	const { data: vulnerabilities } = await getVulnerabilities(getVulnerabilities);
  
  // Process the vulnerability results
  const results = vulnerabilities.map((vulnerability) => ({
    id: vulnerability.id,
    severity: vulnerability.severity,
    description: vulnerability.description,
  }));

  // Send the results to your separate process or service
  const response = await fetch('https://your-process-url.com/vulnerabilities', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(results),
  });

  if (response.ok) {
    console.log('Vulnerability results sent successfully!');
  } else {
    console.error('Error sending vulnerability results:', response.statusText);
  }
}

async function getVulnerabilities(scannerName) {
  try {
    const vulnerabilities = await octokit.request(`GET /repos/{owner}/{repo}/code-scanning/alerts`, {
      owner: "btrzupek", // Replace with the repository owner
      repo: "stm-vuln-app",   // Replace with the repository name
    });

    return vulnerabilities.data;
  } catch (error) {
    console.error("Error fetching vulnerabilities:", error);
    throw error;
  }
}

run();
})();