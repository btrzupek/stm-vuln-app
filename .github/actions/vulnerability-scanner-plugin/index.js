(async () => {
const github = require('@actions/github');
const core = require('@actions/core');
const { Octokit } = await import('@octokit/rest');

const scannerToken = core.getInput('scanner-token');
//const getVulnerabilities = process.env.SCANNER_NAME;
const repoToken = core.getInput('repo-token');

//const { Octokit } = require("@octokit/rest");
const octokit = new Octokit({ auth: scannerToken });
//const octokit = new Octokit({
//  auth: process.env.GITHUB_TOKEN,
//});
//console.log('Scanner Token: ' + scannerToken);

async function run() {
	const { data: vulnerabilities = [] } = await getVulnerabilities(getVulnerabilities);
  	var results;
  // Process the vulnerability results
    results = vulnerabilities.map((vulnerability) => ({
	    id: vulnerability.id,
	    severity: vulnerability.severity,
	    description: vulnerability.description,
 	 }));
	 
	 var repo = "";
	 try {
	   repo = getRepoComponents();
	   console.log(repo.owner);     // e.g., "octocat"
	   console.log(repo.name);      // e.g., "Hello-World"
	   console.log(repo.fullName);  // e.g., "octocat/Hello-World"
	 } catch (error) {
	   console.error('Failed to get repository information:', error.message);
	 }
	 
	try {
		// Send the results to your separate process or service
		const response = await fetch('http://nodejs-env.eba-gjkqbh4t.us-east-2.elasticbeanstalk.com/findPKIAndCryptoThings', {
			method: 'POST',
			headers: {
			  'Content-Type': 'application/json',
			},
			body: JSON.stringify({
				results: results,
				repository: repo.fullName
			}),
		});

		if (response.ok) {
			console.log('Vulnerability results sent successfully!');
		} else {
			console.error('Error sending vulnerability results:', response.statusText);
		}
	} catch (error) {
	  console.error("Error calling processing service:", error);
	  //throw error;
	}
}

async function getVulnerabilities(scannerName) {
  try {
    const vulnerabilities = await octokit.request(`GET /repos/{owner}/{repo}/code-scanning/alerts`, {
      owner: "btrzupek", // Replace with the repository owner
      repo: "stm-vuln-app",   // Replace with the repository name
    });

    return vulnerabilities.data;
  } catch (error) {
    console.error("Error fetching vulnerabilities:", error);
    throw error;
  }
}

/*
Usage:
try {
  const repo = getRepoComponents();
  console.log(repo.owner);     // e.g., "octocat"
  console.log(repo.name);      // e.g., "Hello-World"
  console.log(repo.fullName);  // e.g., "octocat/Hello-World"
} catch (error) {
  console.error('Failed to get repository information:', error.message);
}

*/
const getRepoComponents = () => {
  const repoPath = process.env.GITHUB_REPOSITORY;
  if (!repoPath) {
    throw new Error('GITHUB_REPOSITORY environment variable is not set');
  }
  
  const [owner, name] = repoPath.split('/');
  if (!owner || !name) {
    throw new Error('GITHUB_REPOSITORY format is invalid. Expected format: owner/name');
  }

  return {
    owner,
    name,
    fullName: repoPath
  };
};

run();
})();